<calc-header></calc-header>
<display>399,981</display>
<keypad></keypad>

<style>
  calculator {
    display: flex;
    flex-direction: column;
    width: min(100%, 540px);
    line-height: normal;
    container: calculator / inline-size;
    user-select: none; /* prevents text selection which can cause drag events */
  }
</style>

<script webc:bucket="defer">
  class Calculator {
    constructor(selectors) {
      this.currentValue = '';
      this.result = 0;
      this.operator = null;
      this.displayWidth = 10; // Maximum number of characters the display can accommodate

      this.bindToDOM(selectors)
      this.bindKeys()
    }

    bindToDOM(selectors) {
      this.root = document.querySelector(selectors)
      this.display = this.root.querySelector('display')
      this.keypad = this.root.querySelector('keypad')

      this.updateDisplay()

      this.keypad.addEventListener('click', event => {
        const keyId = event.target.id
        if (/^[.0-9]$/.test(keyId)) {
          this.inputDigit(keyId)
        } else if (['+', '-', '*', '/'].includes(keyId)) {
          this.setOperator(keyId)
        } else if (keyId === '=') {
          this.calculate()
        } else if (keyId === 'reset') {
          this.clear()
        } else if (keyId === 'del') {
          this.clearEntry()
        }
      })
    }

    bindKeys() {
      document.addEventListener('keydown', event => {
        if (event.altKey || event.ctrlKey || event.metaKey) {
          return // Ignore keypress if a modifer key is also pressed
        }

        const press = keyId => {
          event.preventDefault()

          const button = this.keypad.children.namedItem(keyId)
          button.classList.add('active')
          button.focus()
          button.click()

          document.addEventListener('keyup', () => {
            button.classList.remove('active')
          }, { once: true })
        }

        const key = event.key
        if (/^[.0-9]$/.test(key) || ['+', '-', '*', '/'].includes(key)) {
          press(key)
        } else if (key === 'Enter' || key === '=') {
          press('=')
        } else if (key === 'Escape' || key === 'r') {
          press('reset')
        } else if (key === 'Delete' || key === 'd') {
          press('del')
        }
      })
    }

    updateDisplay() {
      this.display.textContent = this.getDisplayValue()
    }

    inputDigit(digit) {
      if (digit === '.' && this.currentValue.includes('.')) {
        return; // Prevent multiple decimal points
      }
      if (this.currentValue === '0' && digit !== '.') {
        this.currentValue = digit; // Prevent leading zeroes
      } else if (this.currentValue === '' && digit === '.') {
        this.currentValue = '0.'; // Except for decimals less than 1
      } else if (this.currentValue.length < this.displayWidth) {
        this.currentValue += digit; // Limit input digits to the display width
      }
      this.updateDisplay();
    }

    setOperator(operator) {
      if (this.currentValue === '') {
        return; // Prevent setting an operator without a number
      }
      if (this.operator !== null) {
        this.calculate(); // Perform the calculation if there's an existing operator
      } else {
        this.result = parseFloat(this.currentValue);
      }
      this.currentValue = '';
      this.operator = operator;
      this.updateDisplay();
    }

    calculate() {
      if (this.currentValue === '') {
        return; // Prevent calculation without a second operand
      }
      const current = parseFloat(this.currentValue);
      switch (this.operator) {
        case '+':
          this.result += current;
          break;
        case '-':
          this.result -= current;
          break;
        case '*':
          this.result *= current;
          break;
        case '/':
          if (current === 0) {
            alert('Error: Division by zero');
            return;
          }
          this.result /= current;
          break;
        default:
          return;
      }
      this.operator = null;
      this.currentValue = this.formatOutput(this.result);
      this.updateDisplay();
    }

    clear() {
      this.currentValue = '';
      this.result = 0;
      this.operator = null;
      this.updateDisplay();
    }

    clearEntry() {
      this.currentValue = '0';
      this.updateDisplay();
    }

    formatOutput(value) {
      const strValue = value.toString();
      if (strValue.length <= this.displayWidth) {
        return strValue;
      }
      // Calculate the maximum number of decimal places that fit in the display
      const maxDecimals = this.displayWidth - Math.floor(value).toString().length - 1;
      return value.toFixed(maxDecimals > 0 ? maxDecimals : 0);
    }

    getDisplayValue() {
      return this.currentValue === '' ? this.formatOutput(this.result) : this.currentValue;
    }
  }

  // Example usage:
  const calculator = new Calculator('calculator');

  calculator.inputDigit('5');
  calculator.setOperator('+');
  calculator.inputDigit('3');
  calculator.calculate();
  console.log(calculator.getDisplayValue()); // Outputs: 8

  calculator.setOperator('/');
  calculator.inputDigit('3');
  calculator.calculate();
  console.log(calculator.getDisplayValue()); // Outputs: 16

  calculator.clear();
  console.log(calculator.getDisplayValue()); // Outputs: 0
</script>
