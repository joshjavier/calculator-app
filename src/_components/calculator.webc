<calc-header></calc-header>
<display>399,981</display>
<keypad></keypad>

<style>
  calculator {
    display: flex;
    flex-direction: column;
    width: min(100%, 540px);
    line-height: normal;
    container: calculator / inline-size;
    user-select: none; /* prevents text selection which can cause drag events */
  }
</style>

<script webc:bucket="defer">
  const DIGITS = /^[.0-9]$/
  const OPERATORS = /^[\+\-\*\/]$/

  class Calculator {
    constructor(selectors) {
      this.currentValue = '';
      this.result = 0;
      this.operator = null;
      this.displayWidth = 10; // Maximum number of characters the display can accommodate

      this.bindToDOM(selectors)
    }

    bindToDOM(selectors) {
      this.root = document.querySelector(selectors)
      this.display = this.root.querySelector('display')
      this.keypad = this.root.querySelector('keypad')

      this.pressKey = this.pressKey.bind(this)

      this.keypad.addEventListener('click', this.pressKey)
    }

    updateDisplay() {
      this.display.textContent = this.getDisplayValue()
    }

    /** @param {PointerEvent} event */
    pressKey(event) {
      /** @type {string} key */
      let key = event.target.textContent
      key = key.replace('\u2212', '-') // Replace &minus; with -
      key = key.replace('\u00d7', '*') // Replace &times; with *

      if (DIGITS.test(key)) {
        this.inputDigit(key)
      } else if (OPERATORS.test(key)) {
        this.setOperator(key)
      } else if (key === '=') {
        this.calculate()
      } else if (key === 'RESET') {
        this.clear()
      } else if (key === 'DEL') {
        this.clearEntry()
      }

      this.updateDisplay()
    }

    inputDigit(digit) {
      if (digit === '.' && this.currentValue.includes('.')) {
        return; // Prevent multiple decimal points
      }
      if (this.currentValue === '0' && digit !== '.') {
        this.currentValue = digit; // Prevent leading zeroes
      } else if (this.currentValue === '' && digit === '.') {
        this.currentValue = '0.'; // Except for decimals less than 1
      } else {
        this.currentValue += digit;
      }
    }

    setOperator(operator) {
      if (this.currentValue === '') {
        return; // Prevent setting an operator without a number
      }
      if (this.operator !== null) {
        this.calculate(); // Perform the calculation if there's an existing operator
      } else {
        this.result = parseFloat(this.currentValue);
      }
      this.currentValue = '';
      this.operator = operator;
    }

    calculate() {
      if (this.currentValue === '') {
        return; // Prevent calculation without a second operand
      }
      const current = parseFloat(this.currentValue);
      switch (this.operator) {
        case '+':
          this.result += current;
          break;
        case '-':
          this.result -= current;
          break;
        case '*':
          this.result *= current;
          break;
        case '/':
          if (current === 0) {
            alert('Error: Division by zero');
            return;
          }
          this.result /= current;
          break;
        default:
          return;
      }
      this.operator = null;
      this.currentValue = this.formatOutput(this.result);
    }

    clear() {
      this.currentValue = '';
      this.result = 0;
      this.operator = null;
    }

    clearEntry() {
      this.currentValue = '0';
    }

    formatOutput(value) {
      const strValue = value.toString();
      if (strValue.length <= this.displayWidth) {
        return strValue;
      }
      // Calculate the maximum number of decimal places that fit in the display
      const maxDecimals = this.displayWidth - Math.floor(value).toString().length - 1;
      return value.toFixed(maxDecimals > 0 ? maxDecimals : 0);
    }

    getDisplayValue() {
      return this.currentValue === '' ? this.formatOutput(this.result) : this.currentValue;
    }
  }

  // Example usage:
  const calculator = new Calculator('calculator');

  calculator.inputDigit('5');
  calculator.setOperator('+');
  calculator.inputDigit('3');
  calculator.calculate();
  console.log(calculator.getDisplayValue()); // Outputs: 8

  calculator.setOperator('/');
  calculator.inputDigit('3');
  calculator.calculate();
  console.log(calculator.getDisplayValue()); // Outputs: 16

  calculator.clear();
  console.log(calculator.getDisplayValue()); // Outputs: 0
</script>
