<form id="theme-switch" webc:root="override">
  <fieldset class="theme-switch" role="radiogroup">
    <legend class="visually-hidden">Select a theme</legend>
    <div class="container">
      <div aria-hidden="true">THEME</div>
      <div>
        <div class="labels" aria-hidden="true">
          <div>1</div>
          <div>2</div>
          <div>3</div>
        </div>
        <div class="track">
          <input type="radio" name="theme" id="dark" value="dark" aria-label="dark theme" checked>
          <input type="radio" name="theme" id="light" value="light" aria-label="light theme">
          <input type="radio" name="theme" id="purple" value="purple" aria-label="purple theme">
          <svg viewBox="0 0 16 16" width="16" height="16" fill="none" aria-hidden="true" focusable="false">
            <circle cx="8" cy="8" r="8" />
          </svg>
        </div>
      </div>
    </div>
  </fieldset>
</form>

<style>
  .theme-switch {
    border: none;
    padding: 0;
    margin: 0;
    font-size: var(--text-s);

    & .container {
      display: flex;
      gap: 26px;
      align-items: end;

      & > :first-child {
        margin-bottom: 5px;
        letter-spacing: var(--tracking-wide);
      }
    }

    & .labels {
      display: flex;
      justify-content: center;
      text-align: center;
      margin-bottom: 5px;

      & > * { width: 12px; }
      & > :nth-child(1) { margin-right: 11px; }
      & > :nth-child(2) { margin-right: 10px; }
    }

    & .track {
      border-radius: 13px;
      display: flex;
      background-color: var(--color-switch-track, var(--color-ebony-clay));
      position: relative;
      user-select: none; /* prevents text selection which can cause drag events */

      & > :nth-child(1) { margin-right: -3px; }
      & > :nth-child(2) { margin-right: -4px; }
    }

    & input[type="radio"] {
      width: 26px;
      height: 26px;
      margin: 0;
      opacity: 0;
      cursor: pointer;

      /* send the selected radio button behind the switch track to put the handle on top */
      &:checked { z-index: -1; }

      & ~ svg {
        margin: 5px;
        border-radius: 9999em;
        fill: var(--color-switch-handle, var(--color-persian-red));
        position: absolute;
        transition: transform 0.3s ease;
        transform: translateX(var(--handle-position));
        cursor: pointer;

        &:hover {
          fill: var(--color-switch-handle-hover, var(--color-bittersweet));
        }
      }

      &:focus-visible ~ svg {
        outline: var(--fluid-6-9) double black;
        box-shadow: 0 0 0 var(--fluid-4-6) white;
      }

      &:nth-child(2):checked ~ svg {
        --handle-position: 23px;
      }

      &:nth-child(3):checked ~ svg {
        --handle-position: 45px;
      }
    }
  }
</style>

<script>
  /** @typedef {'light'|'dark'|'purple'} Theme */

  /** @type {Theme} theme - The state that holds the current theme */
  let theme
  /** @type {HTMLFormElement} themeSwitch - The DOM element that allows users to change the current theme */
  let themeSwitch

  /**
   * Gets the theme preference from the local storage (if set). Otherwise,
   * returns 'light' or 'dark' depending on the `prefers-color-scheme` value
   *
   * @returns {Theme}
   */
  function getThemePreference(key = 'theme-preference') {
    if (localStorage.getItem(key)) {
      return localStorage.getItem(key)
    } else {
      return window.matchMedia('(prefers-color-scheme: light)').matches
        ? 'light'
        : 'dark'
    }
  }

  /**
   * Updates the DOM to reflect the theme change
   */
  function reflectThemeChange() {
    document.documentElement.setAttribute('data-theme', theme)

    if (document.readyState === 'loading') return

    if (!themeSwitch) {
      themeSwitch = document.querySelector('#theme-switch')
    }

    if (themeSwitch.elements['theme'].value !== theme) {
      themeSwitch.elements['theme'].value = theme
    }
  }

  // Save the theme preference into state
  theme = getThemePreference()
  // Set the `data-theme` attribute early to prevent page flashes
  reflectThemeChange()
</script>

<script webc:bucket="defer">
  /**
   * Saves the theme preference in local storage
   * and updates the DOM to reflect the changes
   */
  function setThemePreference(key = 'theme-preference') {
    localStorage.setItem(key, theme)
    reflectThemeChange()
  }

  // Call once DOM is ready to sync radio buttons with the theme state
  reflectThemeChange()

  // Bind event handler to update the theme on switch interaction
  themeSwitch.addEventListener('change', event => {
    theme = event.target.id
    setThemePreference()
  })

  // Bind event handler to update the theme when `prefers-color-scheme` changes
  window
    .matchMedia('(prefers-color-scheme: light)')
    .addEventListener('change', ({ matches: isLight }) => {
      theme = isLight ? 'light' : 'dark'
      setThemePreference()
    })
</script>

<script webc:bucket="defer">
  /*
    ✨ Progressive Enhancement ✨
    Let's make the switch handle draggable!
  */

  /* Utilities */

  /**
   * Returns the number of pixels from the left of the page to the left edge of the element
   * @param {HTMLElement} element
   * @returns {number}
   */
  function getOffsetLeft(element) {
    if (!element) return 0
    return getOffsetLeft(element.offsetParent) + element.offsetLeft
  }

  /**
   * Returns the x coordinate of the pointer relative to the element
   * @param {number} pageX
   * @param {HTMLElement} element
   * @returns {number}
   */
  function getInnerX(pageX, element) {
    return Math.floor(pageX - getOffsetLeft(element))
  }

  /**
   * Returns the size of the switch handle including margin in pixels
   * @returns {number}
   */
  function getHandleSize() {
    const margin = parseInt(getComputedStyle(handle).margin)
    return handle.clientWidth + (margin * 2)
  }

  /* Variables */

  /** @type {boolean} handlePressed - True when the switch handle is pressed */
  let handlePressed
  /** @type {HTMLElement} track - The switch track */
  const track = themeSwitch.querySelector('.track')
  /** @type {HTMLElement} handle - The switch handle */
  const handle = themeSwitch.querySelector('.track svg')
  /** @type {number[]} thresholds - Array of starting thresholds in px for each option */
  const thresholds = [...themeSwitch.elements['theme']].map(radio => radio.offsetLeft)

  track.addEventListener('pointerdown', function (event) {
    handlePressed = event.target !== this

    document.addEventListener('pointermove', dragHandle)
    document.addEventListener('pointerup', releaseHandle, { once: true })
  })

  /** @param {PointerEvent} event */
  function dragHandle(event) {
    if (!handlePressed) return

    let x = getInnerX(event.pageX, track)
    let pos = x - (getHandleSize() / 2)
    if (pos < thresholds[0]) pos = thresholds[0]
    if (pos > thresholds[thresholds.length - 1]) pos = thresholds[thresholds.length - 1]

    handle.style.setProperty('transition-duration', '0s')
    handle.style.setProperty('--handle-position', pos + 'px')
  }

  /** @param {PointerEvent} event */
  function releaseHandle(event) {
    handlePressed = false
    snapToOption(getInnerX(event.pageX, track))
    handle.removeAttribute('style')
    document.removeEventListener('pointermove', dragHandle)
  }

  /**
   * Snap the handle to the option closest to the x coordinate
   * @param {number} x
   */
  function snapToOption(x) {
    for (let i = thresholds.length - 1; i >= 0; i--) {
      if (x >= thresholds[i] || i === 0) {
        themeSwitch.elements['theme'][i].click()
        return
      }
    }
  }
</script>
