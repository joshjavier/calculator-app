<form id="theme-switch" webc:root="override">
  <fieldset class="theme-switch" role="radiogroup">
    <legend class="visually-hidden">Select a theme</legend>
    <div class="container">
      <div aria-hidden="true">THEME</div>
      <div>
        <div class="labels" aria-hidden="true">
          <div>1</div>
          <div>2</div>
          <div>3</div>
        </div>
        <div class="track">
          <div class="radio-wrapper">
            <input type="radio" name="theme" id="dark" value="dark" aria-label="dark theme">
            <svg viewBox="0 0 16 16" width="16" height="16" fill="none" aria-hidden="true" focusable="false">
              <circle cx="8" cy="8" r="8" />
            </svg>
          </div>
          <div class="radio-wrapper">
            <input type="radio" name="theme" id="light" value="light" aria-label="light theme">
            <svg viewBox="0 0 16 16" width="16" height="16" fill="none" aria-hidden="true" focusable="false">
              <circle cx="8" cy="8" r="8" />
            </svg>
          </div>
          <div class="radio-wrapper">
            <input type="radio" name="theme" id="purple" value="purple" aria-label="purple theme">
            <svg viewBox="0 0 16 16" width="16" height="16" fill="none" aria-hidden="true" focusable="false">
              <circle cx="8" cy="8" r="8" />
            </svg>
          </div>
        </div>
      </div>
    </div>
  </fieldset>
</form>

<style>
  .theme-switch {
    border: none;
    padding: 0;
    margin: 0;
    font-size: var(--text-s);

    & .container {
      display: flex;
      gap: 26px;
      align-items: end;

      & > :first-child {
        margin-bottom: 5px;
        letter-spacing: var(--tracking-wide);
      }
    }

    & .labels {
      display: flex;
      justify-content: center;
      text-align: center;
      margin-bottom: 5px;

      & > * { width: 12px; }
      & > :nth-child(1) { margin-right: 11px; }
      & > :nth-child(2) { margin-right: 10px; }
    }

    & .track {
      border-radius: 13px;
      display: flex;
      background-color: var(--color-switch-track, var(--color-ebony-clay));

      & > :nth-child(1) { margin-right: -3px; }
      & > :nth-child(2) { margin-right: -4px; }

      /* &:has(input[type="radio"]:focus-visible) {
        outline: var(--fluid-6-9) double black;
        box-shadow: 0 0 0 var(--fluid-4-6) white;
      } */
    }
  }

  .radio-wrapper {
    width: 26px;
    height: 26px;
    position: relative;

    & input[type="radio"] {
      position: absolute;
      width: 26px;
      height: 26px;
      margin: 0;
      opacity: 0;
      cursor: pointer;
      z-index: 1;

      & + svg {
        margin: 5px;
        border-radius: 9999em;
      }

      &:checked {
        & + svg {
          fill: var(--color-switch-handle, var(--color-persian-red));
        }

        &:hover + svg {
          fill: var(--color-switch-handle-hover, var(--color-bittersweet));
        }

        &:focus-visible + svg {
          outline: var(--fluid-6-9) double black;
          box-shadow: 0 0 0 var(--fluid-4-6) white;
          /* box-shadow: 0 0 0 8px color-mix(in srgb, var(--color-switch-handle, var(--color-persian-red)), transparent 50%); */
        }
      }
    }
  }
</style>

<script>
  /** @typedef {'light'|'dark'|'purple'} Theme */

  /** @type {Theme} theme - The state that holds the current theme */
  let theme
  /** @type {HTMLFormElement} themeSwitch - The DOM element that allows users to change the current theme */
  let themeSwitch

  /**
   * Gets the theme preference from the local storage (if set). Otherwise,
   * returns 'light' or 'dark' depending on the `prefers-color-scheme` value
   *
   * @returns {Theme}
   */
  function getThemePreference(key = 'theme-preference') {
    if (localStorage.getItem(key)) {
      return localStorage.getItem(key)
    } else {
      return window.matchMedia('(prefers-color-scheme: light)').matches
        ? 'light'
        : 'dark'
    }
  }

  /**
   * Updates the DOM to reflect the theme change
   */
  function reflectThemeChange() {
    document.firstElementChild.setAttribute('data-theme', theme)

    themeSwitch = themeSwitch || document.querySelector('#theme-switch')
    if (themeSwitch) {
      const themeRadios = themeSwitch.elements['theme']

      // If needed, check the radio button that corresponds to the current theme
      if (themeRadios.value !== theme) {
        const themeRadio = [...themeRadios].find(radio => radio.id === theme)
        themeRadio.checked = true
      }
    }
  }

  // Save the theme preference into state
  theme = getThemePreference()
  // Set the `data-theme` attribute early to prevent page flashes
  reflectThemeChange()
</script>

<script webc:bucket="defer">
  /**
   * Saves the theme preference in local storage
   * and updates the DOM to reflect the changes
   */
  function setThemePreference(key = 'theme-preference') {
    localStorage.setItem(key, theme)
    reflectThemeChange()
  }

  // Call once DOM is ready to sync radio buttons with the theme state
  reflectThemeChange()

  // Bind event handlers to update the theme on switch interaction
  themeSwitch.elements['theme'].forEach(radio => {
    radio.addEventListener('change', event => {
      theme = event.target.id
      setThemePreference()
    })
  })

  // Bind event handler to update the theme when `prefers-color-scheme` changes
  window
    .matchMedia('(prefers-color-scheme: light)')
    .addEventListener('change', ({ matches: isLight }) => {
      theme = isLight ? 'light' : 'dark'
      setThemePreference()
    })
</script>
